#!/usr/bin/env bash

# If not running interactively, don't do anything
case $- in
*i*) ;;
*) return;;
esac

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# typo correction for bash
shopt -s cdspell
if [[ ! "${BASH_VERSION:0:3}" < "4.2" ]]; then
    shopt -s dirspell
fi

if [[ -f "$HOME"/.bash_features ]]; then
	. "$HOME"/.bash_features
fi

# Alias definitions
if [[ -f "$HOME"/.bash_aliases ]]; then
    . "$HOME"/.bash_aliases
fi

## include the bash libraries ##
################################
for lib in "$HOME"/.bash_lib.d/*; do
    . "$lib"
done

## set up bash completion ##
############################
# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
set completion-ignore-case on

for prog in "$HOME"/.bash_completion.d/*; do
    . "$prog"
done

if [ -f "$HOME"/.bash_prompt ]; then
    . "$HOME"/.bash_prompt
fi

# this loads a well known bashrc based on the REMOTE_USER env variable
# the recommended use of this is to serve as a dispatching script on shared servers
#
# the expected location is .bash_users.d/$REMOTE_USER.bash
#
# To set the REMOTE_USER envvar, you need to turn on PermitUserEnvironment in your sshd,
# and add `environment="REMOTE_USER=steven"` before the related key in ~/.ssh/authorized_keys
#
# PuTTY users can set the REMOTE_USER envvar via the Connection > Data settings,
# but sshd must have the "AllowEnv REMOTE_USER" line added to sshd_config.

if [[ -n "$REMOTE_USER" ]]; then
	if [[ -f "$HOME/.bash_users.d/$REMOTE_USER.bash" ]]; then
		. "$HOME/.bash_users.d/$REMOTE_USER.bash"
	fi
fi

if [[ -n "$TMUX" ]]; then
	if [[ -f "$HOME/.tmux_profile" ]]; then
		. "$HOME/.tmux_profile"
	fi
fi
