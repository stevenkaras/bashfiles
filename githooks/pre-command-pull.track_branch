#!/usr/bin/env bash

current_branch="$(git rev-parse --symbolic --abbrev-ref HEAD)"
current_remote="$(git config branch.${current_branch}.remote)"

tracking_branch="$(git show ${current_branch}:.gittracking 2>/dev/null)"
if [[ $? != 0 ]]; then
	tracking_branch="$(git config branch.${current_branch}.autotracking)"
fi

if [[ -z "$tracking_branch" ]]; then
	exit 0
fi

if [[ "$#" -gt 0 ]]; then
	cat <<USAGE
There is an auto tracking branch configured for the current branch ($current_branch).

If you wanted to run git pull to do something special, you should run it as this:
command git pull $@

But this probably isn't what you wanted to do. To pull changes from $current_remote/$tracking_branch,
simply run: git pull
USAGE
	exit 1
fi

git fetch "$current_remote" "$tracking_branch" "$current_branch"
_exit_status=$?
if [[ $_exit_status != 0 ]]; then
	echo "Error while fetching commits from remote: $_exit_status"
	exit $_exit_status
fi

# fix up the author if we're running on a shared system
author_info="$(git var GIT_AUTHOR_IDENT)"
if [[ "$author_info" == *"SHOULD NOT BE USED"* ]]; then
	author="--author=$USER <${USER}@$(hostname)>"
fi

if ! git diff-index --quiet HEAD --; then
	user=${REMOTE_USER:-Buddy}
	echo "$user, you need to commit your local changes first. If you aren't $user, find a way to blame them."
	exit 1
fi

commit_before_merge_upstream="$(git rev-parse HEAD)"
git merge "$current_remote/$current_branch" --no-edit --ff-only
_exit_status=$?
if [[ $_exit_status != 0 ]]; then
	# attempt to make the merge as a non-ff merge
	git merge "$current_remote/$current_branch" --no-edit
	_exit_status=$?
	if [[ $_exit_status != 0 ]]; then
		echo "Error while merging changes from $current_remote/$current_branch: $_exit_status"
		git reset --hard $commit_before_merge_upstream
		exit $_exit_status
	fi
	# adjust the author of the merge
	if [[ -n "$author" ]]; then
		git commit --amend -C HEAD "$author"
	fi
fi

commit_before_merge_tracking="$(git rev-parse HEAD)"
git merge "$current_remote/$tracking_branch" --no-ff --no-edit
_exit_status=$?
if [[ $_exit_status != 0 ]]; then
	echo "Error while merging changes from $current_remote/$tracking_branch: $_exit_status"
	git reset --hard $commit_before_merge_upstream
	exit $_exit_status
fi
if [[ "$(git rev-parse HEAD)" != "$commit_before_merge_tracking" ]]; then
	if [[ -n "$author" ]]; then
		git commit --amend -C HEAD "$author"
	fi
fi

commit_after_merges="$(git rev-parse HEAD)"
if [[ "$commit_before_merge_upstream" == "$commit_after_merges" ]]; then
	echo "No changes merged. Nothing to push"
	exit 1
fi

next_version="$(git config branch.${current_branch}.nextautotrackingversion)"
next_version="${next_version:-1}"
git tag -a -m "version ${next_version} of branch $current_branch tracking $tracking_branch" "$current_branch-$next_version"
next_version=$(($next_version + 1))
git config branch.${current_branch}.nextautotrackingversion $next_version

git push "$current_remote" "refs/tags/$current_branch-$(($next_version - 1))" "refs/heads/$current_branch"
_exit_status=$?
if [[ $_exit_status != 0 ]]; then
	echo "Error while merging changes from $current_remote/$tracking_branch: $_exit_status"
	exit $_exit_status
fi

# since we did the work, don't let git pull run normally
exit 1
