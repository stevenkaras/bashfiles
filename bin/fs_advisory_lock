#!/usr/bin/env bash

# We use creating a hardlink as the locking primitive here.
# flock is a great primitive for local processes, but this advisory lock is intended to be used as a distributed lock

function _lock() {
	local lockfile="$1"
	local lease_term="${2:-300}" # 5 minute default lease
	shift 2
	while ! _attempt_lock "$lockfile" "$lease_term" 0 "$@"; do
		sleep 0.1
	done
	return 0
}

function _trylock() {
	local lockfile="$1"
	local lease_term="${2:-300}" # 5 minute default lease
	shift 2
	_attempt_lock "$lockfile" "$lease_term" 1 "$@"
	return $?
}

function _attempt_lock() {
	local lockfile="$1"
	local lease_term="$2"
	local show_errors="$3"
	shift 3

	local now
	now="$(date +%s)"
	let expiry="$now + $lease_term"
	printf "%s\n%s\n" "$$" "$expiry" > "$lockfile.$expiry"
	printf "%s\n" "$@" >> "$lockfile.$expiry"
	while ! ln "$lockfile.$expiry" "$lockfile" 2>/dev/null; do
		local current_expiry
		current_expiry="$(head -n2 "$lockfile" 2>/dev/null | tail -n1)"
		if [[ $? != 0 ]]; then
			# this can happen when someone has manually clobbered the lock state
			[[ $show_errors -eq 1 ]] && >&2 printf "Lock in partial state. May be safe to bust the lock: %s" "$lockfile"
			return 1
		else
			if [[ "$current_expiry" -lt "$now" ]]; then
				[[ $show_errors -eq 1 ]] && >&2 printf "Lock lease expired. May be safe to bust the lock: %s" "$lockfile"
				# The lease has expired, and the lock can be semi-safely busted open
				# however, there is no easy way to avoid race conditions here, so I don't provide a solution yet
				return 1
			else
				# clean up our attempt to grab the lock
				rm "$lockfile.$expiry"
				return 1
			fi
		fi
	done

	return 0
}

function _renew() {
	local lockfile="$1"
	local lease_term="${2:-300}" # 5 minute default lease

	local now
	now="$(date +%s)"
	let expiry="$now + $lease_term"
	local current_expiry
	current_expiry="$(head -n2 "$lockfile" 2>/dev/null | tail -n1)"
	printf "%s" "$$\n$expiry" > "$lockfile.$current_expiry"
	mv "$lockfile.$current_expiry" "$lockfile.$expiry"

	return 0
}

function _unlock() {
	local lockfile="$1"

	local current_expiry
	current_expiry="$(head -n2 "$lockfile" 2>/dev/null | tail -n1)"
	rm -f "$lockfile.$current_expiry"
	rm -f "$lockfile"
}

function show_usage() {
	local prog
	prog="$(basename "$0")"
	cat <<-HELPMESSAGE
		  $prog lock [LOCKNAME] [LEASE_TERM]     # acquire the advisory lock, blocking until it's acquired
		  $prog trylock [LOCKNAME] [LEASE_TERM]  # exits with status 0 if the lock is acquired, otherwise 1
		  $prog renew [LOCKNAME] [LEASE_TERM]    # renew a currently held lock
		  $prog unlock [LOCKNAME]                # release an advisory lock
	HELPMESSAGE
	if [[ "$1" == "-v" || "$1" == "--verbose" ]]; then
		cat <<-VERBOSEHELP

			This script provides a simple locking mechanism for use in external scripts.
			The default lease term is 5 minutes.
			Any extra arguments to lock or trylock are saved in the lockfile to ease debugging.
		VERBOSEHELP
	fi
}

function main() {
	local subcommand="$1"
	shift
	case "$subcommand" in
		r|renew)
			_renew "$@"
			exit $?
			;;
		t|trylock)
			_trylock "$@"
			exit $?
			;;
		l|lock)
			_lock "$@"
			exit $?
			;;
		u|unlock)
			_unlock "$@"
			exit $?
			;;
		-?|-h|--help|help|"")
			show_usage "$@"
			exit $?
			;;
		*)
			echo "Unknown command: $subcommand"
			echo ""
			show_usage
			exit 2
			;;
	esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
	main "$@"
fi
