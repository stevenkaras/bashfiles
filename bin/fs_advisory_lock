#!/usr/bin/env bash

function _lock() {
	while ! _trylock "$@"; do
		sleep 0.1
	done
	return 0
}

function _trylock() {
	local lockfile="$1"
	local lease_term="${2:-300}" # 5 minute default lease

	local now="$(date +%s)"
	let expiry="$now + $lease_term"
	printf "%s" "$$\n$expiry" > "$lockfile.$expiry"
	while ! ln "$lockfile.$expiry" "$lockfile" 2>/dev/null; do
		if [[ ! -s "$lockfile" ]]; then
			if ! rm -f "$lockfile"; then
				return 1
			fi
		else
			local current_expiry="$(tail -n 1 "$lockfile")"
			if [[ "$current_expiry" -lt "$now" ]]; then
				# The lease has expired, and the lock can be semi-safely busted open
				# However, I don't have a good solution on how to do this...

				#NOTE: this results in a TOCTTOU bug
				# if ! rm -f "$lockfile"; then
				# 	return 1
				# fi
				return 1
			else
				return 1
			fi
		fi
	done

	return 0
}

function _renew() {
	local lockfile="$1"
	local lease_term="${2:-300}" # 5 minute default lease

	local now="$(date +%s)"
	let expiry="$now + $lease_term"
	local current_expiry="$(tail -n 1 "$lockfile")"
	printf "%s" "$$\n$expiry" > "$lockfile.$current_expiry"
	mv "$lockfile.$current_expiry" "$lockfile.$expiry"

	return 0
}

function _unlock() {
	local lockfile="$1"

	local current_expiry="$(tail -n 1 "$lockfile")"
	rm -f "$lockfile.$current_expiry"
	rm -f "$lockfile"
}

function show_usage() {
	local prog="$(basename "$0")"
	cat <<-HELPMESSAGE
		  $prog lock [LOCKNAME] [LEASE_TERM]     # acquire the advisory lock, blocking until it's acquired
		  $prog trylock [LOCKNAME] [LEASE_TERM]  # exits with status 0 if the lock is acquired, otherwise 1
		  $prog renew [LOCKNAME] [LEASE_TERM]    # renew a currently held lock
		  $prog unlock [LOCKNAME]                # release an advisory lock
	HELPMESSAGE
	if [[ "$1" == "-v" || "$1" == "--verbose" ]]; then
		cat <<-VERBOSEHELP

			This script provides a simple locking mechanism for use in external scripts.
			The default lease term is 5 minutes.
		VERBOSEHELP
	fi
}

function main() {
	local subcommand="$1"
	shift
	case "$subcommand" in
		r|renew)
			_renew "$@"
			exit $?
			;;
		t|trylock)
			_trylock "$@"
			exit $?
			;;
		l|lock)
			_lock "$@"
			exit $?
			;;
		u|unlock)
			_unlock "$@"
			exit $?
			;;
		-?|-h|--help|help|"")
			show_usage "$@"
			exit $?
			;;
		*)
			echo "Unknown command: $subcommand"
			echo ""
			show_usage
			exit 2
			;;
	esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
	main "$@"
fi
