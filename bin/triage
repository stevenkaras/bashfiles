#!/usr/bin/env ruby

require 'thunder'

class Triage
  class Log
    def initialize
      @tasks = []
    end

    attr_accessor :tasks

    def self.load(file)
      log = self.new()
      current_task = nil
      file.lines.each do |line|
        next if line.strip.empty? && current_task.nil?
        if line =~ /^(?<date>\d{8}) - (?<subject>.+)$/
          current_task = Task.new($~[:date], $~[:subject], "")
          log.tasks << current_task
        else
          current_task.log << "\n" << line.rstrip.sub(/^    /, "")
        end
      end
      return log
    end

    def to_s
      return @tasks.map(&:to_s).join("\n") + "\n"
    end
  end

  class Task
    def initialize(date, subject, log)
      @date = date
      @subject = subject
      @log = log
    end

    attr_accessor :date, :subject, :log

    def to_s
      return "#{@date} - #{@subject}\n#{@log.strip.lines.map{|line|"    #{line}"}.join()}"
    end
  end

  class CLI
    include Thunder

    def start(*args)
      triage_log_path = find_triage_log()
      if triage_log_path.nil?
        puts "No triage file found...exiting"
        exit 1
      end
      load_triage_log(triage_log_path)

      super
    end

    def load_triage_log(filename)
      @triage = Log.load(File.read(filename))
    end

    def find_triage_log
      [
        "triage",
        ".issues/triage",
      ].each do |candidate|
        previous = nil
        current = File.expand_path(".")
        while true
          full_path = File.expand_path(candidate, current)
          return full_path if File.file?(full_path)
          previous = current
          current = File.dirname(current)
          break if current == previous
        end
      end
      [
        "~/triage",
        "~/.triage",
      ].each do |candidate|
        full_path = File.expand_path(candidate)
        return full_path if File.exist?(full_path)
      end
      return nil
    end

    desc "edit", "launch an editor for the triage file"
    def editor
      # prefer VISUAL, falling back on EDITOR
      editor = ENV["VISUAL"] || ENV["EDITOR"]
      if editor
        exec("#{editor} '#{find_triage_log()}'")
      else
        puts "Cannot determine editor. Please define VISUAL or EDITOR environment variables"
      end
    end

    desc "what", "show the current issue I'm triaging"
    def what
      current_task = @triage.tasks.first
      if current_task
        puts current_task.subject
      end
    end

    desc "defer [N]", "defer the first N tasks to the end of the list"
    def defer(amount = 1)
      amount.to_i.times do
        @triage.tasks.push(@triage.tasks.shift)
      end
      File.write(find_triage_log(), @triage)
    end

    desc "all"
    def all
      puts @triage.tasks.map(&:subject)
    end

    desc "add SUBJECT", "add a new task to the list"
    def add(*subject)
      new_task = Task.new(Time.now.strftime("%Y%m%d"), subject.join(" "), "")
      @triage.tasks.unshift(new_task)
      File.write(find_triage_log(), @triage)
    end

    desc "log COMMENT", "record a log line for the current task"
    def log(*comment)
      current_task = @triage.tasks.first
      raise "No current task" unless current_task
      current_task.log << "\n" << comment.join(" ")

      File.write(find_triage_log(), @triage)
    end

    desc "swap [TO]", "swap the first task with the TOth task in the list"
    def swap(with_target = 1)
      with_target = with_target.to_i
      top_task = @triage.tasks[0]
      @triage.tasks[0] = @triage.tasks[with_target]
      @triage.tasks[with_target] = top_task
      File.write(find_triage_log(), @triage)
    end

    desc "resolve", "mark the current task as resolved"
    def resolve
      triage_file_path = find_triage_log()
      archive_file = File.expand_path("../.triage/#{Time.now.strftime("%Y%m%d")}", triage_file_path)
      if File.exists?(archive_file)
        @resolved = Log.load(File.read(archive_file))
      else
        @resolved = Log.new
      end
      task = @triage.tasks.shift
      task.log << "\n" << "Marked as resolved at #{Time.now.strftime("%Y%m%d %H:%M:%S")}"
      @resolved.tasks.push(task)
      File.write(triage_file_path, @triage)
      File.write(archive_file, @resolved)
    end
  end
end

Triage::CLI.new.start
