#!/usr/bin/env bash
#
# Organizes files by date according to a pattern (See USAGE)


# Get the date from a filename
#
# Arguments:
#   filename
# Output:
#   the date in YYYYMMDD format, if found
# Return Codes:
#   1 - no date found in the filename
function date_for_file() {
	local filename="${1##*/}"

	# YYYYMMDD
	local pattern="^[0-9]{8}"
	if [[ "${filename}" =~ ${pattern} ]]; then
		echo "${filename:0:8}"
		return 0
	fi

	# YYYYMM (default to 1st of the month)
	local pattern="^[0-9]{6}"
	if [[ "${filename}" =~ ${pattern} ]]; then
		echo "${filename:0:6}01"
		return 0
	fi

	# YYYY-MM-DD
	local pattern="^[0-9]{4}-[0-9]{2}-[0-9]{2}"
	if [[ "${filename}" =~ ${pattern} ]]; then
		echo "${filename:0:4}${filename:5:2}${filename:8:2}"
		return 0
	fi

	# YYYY-MM (default to the 1st of the month)
	local pattern="^[0-9]{4}-[0-9]{2}"
	if [[ "${filename}" =~ ${pattern} ]]; then
		echo "${filename:0:4}${filename:5:2}01"
		return 0
	fi

	return 1
}


function _test_date_for_file() {
	local actual expected

	actual="$(date_for_file "20180708 - yyyymmdd example")"
	expected="20180708"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(date_for_file "2018-07-08 - yyyy-mm-dd example")"
	expected="20180708"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"
}


# Compile the date pattern
# Outputs a bash-compatible string intended to be eval'd in a scope with a variable named `epoch`.
# Should safely quote the pattern, so this is intended to be secure.
# Expected usage:
#   eval echo "$(compile_pattern "%y/%m")"
#
# Arguments:
#   pattern
# Output:
#   the compiled pattern, read to be eval'd
# shellcheck disable=SC2016
function compile_pattern() {
	local pattern="$1"
	pattern="$(printf "%q" "${pattern}")"

	pattern="${pattern//%y/%Y}" # I reject the concept of 2-digit years
	pattern="${pattern//%q/'$(((10#$(printf "%(%m)T" "${epoch}") - 1) / 3 + 1))'}"
	pattern="${pattern//%h/'$(((10#$(printf "%(%m)T" "${epoch}") - 1) / 6 + 1))'}"

	echo '$(printf "'"%(${pattern})T"'" "${epoch}")'
}


# shellcheck disable=SC2016,SC2034
function _test_compile_pattern() {
	local actual expected

	actual="$(compile_pattern "%yQ%q")"
	expected='$(printf "%(%YQ$(((10#$(printf "%(%m)T" "${epoch}") - 1) / 3 + 1)))T" "${epoch}")'
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(compile_pattern "%y/%m - %B")"
	expected='$(printf "%(%Y/%m\ -\ %B)T" "${epoch}")'
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(compile_pattern '$(echo hi)/%y')"
	expected='$(printf "%(\$\(echo\ hi\)/%Y)T" "${epoch}")'
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	local epoch="1527897600" # epoch for 20180602
	actual="$(eval echo "$(compile_pattern "%y %m %d")")"
	expected='2018\ 06\ 02'
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	local epoch="1527897600" # epoch for 20180602
	actual="$(eval echo "$(compile_pattern "%b %y")")"
	expected='Jun\ 2018'
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"
}


function day_of_year() {
	local date="$1"
	local -i day_of_year=0
	local -i year="${date:0:4}"
	local -i month="10#${date:4:2}"
	local -i day="10#${date:6:2}"

	if (( month >= 3 )); then
		# formula taken from https://en.wikipedia.org/wiki/Ordinal_date
		# the idea is to count the number of days from march 1st
		(( day_of_year = (306 * month - 914) / 10 + day + 59 ))
		(( day_of_year += year % 4 == 0 && (year % 100 != 0 || year % 400 == 0) ))
	elif (( month == 2 )); then
		(( day_of_year = day + 31))
	else
		(( day_of_year = day ))
	fi

	echo $day_of_year
}


function _test_day_of_year() {
	local actual expected date

	return 0 # disabled exhaustive tests because they are slow

	# exhaustive testing of all dates
	for i in $(seq 1 366); do
		date="$(date -u --date="20180101 + $i days" +%Y%m%d)"
		actual="$(day_of_year "$date")"
		expected="$(date -u --date="$date" +%-j)"
		[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}:$date expected=${expected} actual=${actual}"
	done
	for i in $(seq 1 366); do
		date="$(date -u --date="20160101 + $i days" +%Y%m%d)"
		actual="$(day_of_year "$date")"
		expected="$(date -u --date="$date" +%-j)"
		[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}:$date expected=${expected} actual=${actual}"
	done
}


# Convert a YYYYMMDD date into seconds since the epoch
# This is surprisingly difficult to do in portable bash
#
# Arguments:
#   date
# Output:
#   the number of seconds since the epoch for the midnight on the given date
function date_to_epoch() {
	# inspired by https://www.reddit.com/r/bash/comments/8y7uzz/portable_date_formatting/e28whvg/
	# credit to u/whetu for pointing me in the direction of this solution, based upon:
	# http://www.etalabs.net/sh_tricks.html
	local date="$1"
	local -i day_of_year=0
	local -i year_offset="$(( 10#${date:0:4} - 1600 ))"
	local -i month="10#${date:4:2}"
	local -i day="10#${date:6:2}"

	# inlined version of day_of_year, but skipping leap day accounting
	if (( month >= 3 )); then
		# formula adapted from https://en.wikipedia.org/wiki/Ordinal_date
		# the idea is to count the number of days from march 1st
		(( day_of_year = (306 * month - 914) / 10 + day + 59 ))
	elif (( month == 2 )); then
		(( day_of_year = day + 31))
	else
		(( day_of_year = day ))
	fi

	# 135140 is the number of days between 16000101 and 19700101.
	# 1600 is used as the multiple-of-400 epoch here instead of 2000 since C-style division behaves badly with negative dividends
	(( days_since_epoch = day_of_year + year_offset * 365 + year_offset / 4 - year_offset / 100 + year_offset / 400 - 135140 ))

	echo $(( days_since_epoch * 24 * 60 * 60 ))
}


function _test_date_to_epoch() {
	local actual expected

	actual="$(date_to_epoch "20180602")"
	expected='1527897600'
	# expected="$(date +%s -u --date=20180602)"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(date_to_epoch "20181231")"
	expected='1546214400'
	# expected="$(date +%s -u --date=20181231)"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(date_to_epoch "20160301")"
	expected='1456790400'
	# expected="$(date +%s -u --date=20160301)"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(date_to_epoch "20161231")"
	expected='1483142400'
	# expected="$(date +%s -u --date=20161231)"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"
}


# Prepares the commands to organize files according to a pattern.
#
# Arguments:
#   pattern - the compiled pattern; see compile_pattern
# Input:
#   null-terminated file paths
# Output:
#   commands that can be piped into bash
function prepare_commands() {
	local verbose_flag=""
	(( verbosity > 0 )) && verbose_flag=" -v "
	local compiled_pattern="$1"
	local date epoch file destination_path
	while IFS= read -r -d '' file; do
		date="$(date_for_file "${file}")" || continue
		# shellcheck disable=SC2034
		epoch="$(date_to_epoch "${date}")"

		# see compile_pattern for why the eval is safe
		destination_path="$(eval echo "${compiled_pattern}")"
		echo "mkdir ${verbose_flag}-p '${destination_path}'; mv ${verbose_flag}'${file}' '${destination_path}/${file##*/}'"
	done

	return 0
}


function _test_prepare_commands() {
	local actual expected pattern
	pattern="$(compile_pattern "%yQ%q")"

	actual="$(printf '20180602 - Letter.pdf\x00' | prepare_commands "${pattern}")"
	expected="mkdir -p '2018Q2'; mv '20180602 - Letter.pdf' '2018Q2/20180602 - Letter.pdf'"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(printf '/some/other/dir/20180602 - Letter.pdf\x00' | prepare_commands "/path/to/archive/${pattern}")"
	expected="mkdir -p '/path/to/archive/2018Q2'; mv '/some/other/dir/20180602 - Letter.pdf' '/path/to/archive/2018Q2/20180602 - Letter.pdf'"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(printf "20180602\\x0020180706\\x00" | prepare_commands "${pattern}")"
	expected="mkdir -p '2018Q2'; mv '20180602' '2018Q2/20180602'"$'\n'"mkdir -p '2018Q3'; mv '20180706' '2018Q3/20180706'"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(printf "notadatedfile\\x0020180706\\x00" | prepare_commands "${pattern}")"
	expected="mkdir -p '2018Q3'; mv '20180706' '2018Q3/20180706'"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"
}


# Enumerate the files to be organized
#
# Arguments:
#   files - defaults to reading files from stdin
# Output:
#   null-terminated file paths
function enumerate_files() {
	local files=("$@")
	if (( $# == 0 )) || [[ $# == 1 && "$1" == '-' ]]; then
		if [[ -z "${stdin_null}" ]]; then
			while read -r file; do
				[[ -f "${file}" ]] && printf '%s\x00' "${file}"
			done
		else
			while IFS= read -r -d "" file; do
				[[ -f "${file}" ]] && printf '%s\x00' "${file}"
			done
		fi
	else
		for file in "${files[@]}"; do
			[[ -f "${file}" ]] && printf '%s\x00' "${file}"
		done
	fi

	return 0
}

function _test_enumerate_files() {
	local actual expected pattern
	debug=0

	function _count_null_tokens() {
		local -i count=0
		while IFS= read -r -d '' token; do
			(( count += 1 ))
			(( debug > 0 )) && >&2 echo "count=$count; _=$token"
		done
		echo $count
	}

	actual="$(enumerate_files "$0" "$0" "$0" | _count_null_tokens)"
	expected="3"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(printf '%s\n%s\n%s\n' "$0" "$0" "$0" | enumerate_files | _count_null_tokens)"
	expected="3"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	stdin_null=true
	actual="$(printf '%s\x00%s\x00%s\x00' "$0" "$0" "$0" | enumerate_files | _count_null_tokens)"
	expected="3"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"
	unset stdin_null
}


####################################
# main actions
####################################


function organize() {
	local pattern="$1"
	if [[ -z "${pattern}" ]]; then
		echo "ERROR: PATTERN must be specified"
		>&2 show_usage
		return 1
	fi
	shift

	local execution=bash
	# shellcheck disable=SC2209
	[[ -n "$is_dry_run" ]] && execution=cat

	enumerate_files "$@" | prepare_commands "$(compile_pattern "${pattern}")" | $execution
}


function run_self_tests() {
	_test_date_for_file
	_test_compile_pattern
	_test_prepare_commands
	_test_day_of_year
	_test_date_to_epoch
	_test_enumerate_files
}


function show_usage() {
	local prog="${0##*/}"
	cat <<-HELPMESSAGE
		Usage: ${prog} [OPTIONS] PATTERN [FILE...]  # organize files in the current directory

		Options:
		  -n, --dry-run        only show what would be done, but don't actually do it
		  -t, --test           run self-tests instead of organizing files
		  -0, --null           files read from stdin are terminated by a null character instead of by whitespace
		  -v, --verbose
	HELPMESSAGE
	if (( verbosity > 0 )); then
		cat <<-VERBOSEHELP

		This utility organizes files into a folder hierarchy according to a pattern. Interpreted sequences are:

		  %y    year
		  %m    month (e.g. 07)
		  %b    locale's abbreviated month name
		  %B    locale's full month name (e.g. January)
		  %d    day (e.g. 08)
		  %q    quarter number (e.g. 20180325 is in Q1)
		  %h    half number (e.g. 20180101 is in H1, as is 20180630)
		  %G    year of ISO week number
		  %V    ISO week number
		VERBOSEHELP
	fi
}


function main() {
	local -a args=()
	declare -i verbosity=0
	# shellcheck disable=SC2016
	local subcommand='organize "${args[@]}"'
	while (( $# > 0 )); do
		case "$1" in
			-0|--null)
				stdin_null=true
				;;
			-n|--dry-run)
				is_dry_run=true
				;;
			-v|--verbose)
				verbosity+=1
				;;
			-t|--test)
				subcommand="run_self_tests"
				;;
			-\?|-h|--help|help)
				subcommand=">&2 show_usage"
				;;
			--)
				shift
				break
				;;
			*)
				args+=("$1")
				;;
		esac
		shift
	done
	while (( $# > 0 )); do
		args+=("$1")
		shift
	done

	# shellcheck disable=SC2086
	eval $subcommand
}

main "$@"
