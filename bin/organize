#!/usr/bin/env bash
#
# Organizes files by date according to a pattern (See USAGE)


# Get the date from a filename
#
# Arguments:
#   filename
# Output:
#   the date in YYYYMMDD format, if found
# Return Codes:
#   1 - no date found in the filename
function date_for_file() {
	local filename="${1##*/}"

	# YYYYMMDD
	local pattern="^[0-9]{8}"
	if [[ "${filename}" =~ ${pattern} ]]; then
		echo "${filename:0:8}"
		return 0
	fi

	# YYYYMM (default to 1st of the month)
	local pattern="^[0-9]{6}"
	if [[ "${filename}" =~ ${pattern} ]]; then
		echo "${filename:0:6}01"
		return 0
	fi

	# YYYY-MM-DD
	local pattern="^[0-9]{4}-[0-9]{2}-[0-9]{2}"
	if [[ "${filename}" =~ ${pattern} ]]; then
		echo "${filename:0:4}${filename:5:2}${filename:8:2}"
		return 0
	fi

	# YYYY-MM (default to the 1st of the month)
	local pattern="^[0-9]{4}-[0-9]{2}"
	if [[ "${filename}" =~ ${pattern} ]]; then
		echo "${filename:0:4}${filename:5:2}01"
		return 0
	fi

	return 1
}


function _test_date_for_file() {
	local actual expected

	actual="$(date_for_file "20180708 - yyyymmdd example")"
	expected="20180708"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(date_for_file "2018-07-08 - yyyy-mm-dd example")"
	expected="20180708"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"
}


# Compile the date pattern
# Outputs a bash-compatible string intended to be eval'd in a scope with a variable named `date`.
# Should safely quote the pattern, so this is intended to be secure.
# Expected usage:
#   eval echo "$(compile_pattern "%y/%m")"
#
# Arguments:
#   pattern
# Output:
#   the compiled pattern, read to be eval'd
# shellcheck disable=SC2016
function compile_pattern() {
	local pattern="$1"
	pattern="$(printf "%q" "${pattern}")"

	pattern="${pattern//%y/'${date:0:4}'}"
	pattern="${pattern//%m/'${date:4:2}'}"
	pattern="${pattern//%b/'$(date --date="${date}" +%b)'}"
	pattern="${pattern//%B/'$(date --date="${date}" +%B)'}"
	pattern="${pattern//%d/'${date:6:2}'}"
	pattern="${pattern//%q/'$(((10#${date:4:2} - 1) / 3 + 1))'}"
	pattern="${pattern//%h/'$(((10#${date:4:2} - 1) / 6 + 1))'}"
	pattern="${pattern//%G/'$(date --date="${date}" +%G)'}"
	pattern="${pattern//%V/'$(date --date="${date}" +%V)'}"

	echo "${pattern}"
}


# shellcheck disable=SC2016
function _test_compile_pattern() {
	local actual expected

	actual="$(compile_pattern "%yQ%q")"
	expected='${date:0:4}Q$(((10#${date:4:2} - 1) / 3 + 1))'
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(compile_pattern "%y/%m - %B")"
	expected='${date:0:4}/${date:4:2}\ -\ $(date --date="${date}" +%B)'
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(compile_pattern '$(echo hi)/%y')"
	expected='\$\(echo\ hi\)/${date:0:4}'
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	local date="20180602"
	actual="$(eval echo "$(compile_pattern "%y %m %d")")"
	expected="2018 06 02"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	local date="20180602"
	actual="$(eval echo "$(compile_pattern "%b %y")")"
	expected="Jun 2018"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"
}


# Prepares the commands to organize files according to a pattern.
#
# Arguments:
#   pattern - the compiled pattern; see compile_pattern
# Input:
#   null-terminated file paths
# Output:
#   commands that can be piped into bash
function prepare_commands() {
	local verbose_flag=""
	(( verbosity > 0 )) && verbose_flag=" -v "
	local compiled_pattern="$1"
	local date file destination_path
	while IFS= read -r -d '' file; do
		# shellcheck disable=SC2034
		date="$(date_for_file "${file}")" || continue

		# see compile_pattern for why the eval is safe
		destination_path="$(eval echo "${compiled_pattern}")"
		echo "mkdir ${verbose_flag}-p '${destination_path}'; mv ${verbose_flag}'${file}' '${destination_path}/${file##*/}'"
	done

	return 0
}


function _test_prepare_commands() {
	local actual expected pattern
	pattern="$(compile_pattern "%yQ%q")"

	actual="$(printf '20180602 - Letter.pdf\x00' | prepare_commands "${pattern}")"
	expected="mkdir -p '2018Q2'; mv '20180602 - Letter.pdf' '2018Q2/20180602 - Letter.pdf'"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(printf '/some/other/dir/20180602 - Letter.pdf\x00' | prepare_commands "/path/to/archive/${pattern}")"
	expected="mkdir -p '/path/to/archive/2018Q2'; mv '/some/other/dir/20180602 - Letter.pdf' '/path/to/archive/2018Q2/20180602 - Letter.pdf'"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(printf "20180602\\x0020180706\\x00" | prepare_commands "${pattern}")"
	expected="mkdir -p '2018Q2'; mv '20180602' '2018Q2/20180602'"$'\n'"mkdir -p '2018Q3'; mv '20180706' '2018Q3/20180706'"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"

	actual="$(printf "notadatedfile\\x0020180706\\x00" | prepare_commands "${pattern}")"
	expected="mkdir -p '2018Q3'; mv '20180706' '2018Q3/20180706'"
	[[ "${actual}" == "${expected}" ]] || >&2 echo "FAIL $0:${LINENO}: expected=${expected} actual=${actual}"
}


# Enumerate the files to be organized
#
# Arguments:
#   files - defaults to all files in the current directory
# Output:
#   null-terminated file paths
function enumerate_files() {
	local files=("$@")
	if (( $# == 0 )); then
		# default to all files in the current directory
		for file in ./* ./.*; do
			[[ -f "${file}" ]] && printf '%s\0' "${file}"
		done
	else
		for file in "${files[@]}"; do
			[[ -f "${file}" ]] && printf '%s\0' "${file}"
		done
	fi

	return 0
}


####################################
# main actions
####################################


function organize() {
	local pattern="$1"
	if [[ -z "${pattern}" ]]; then
		echo "ERROR: PATTERN must be specified"
		>&2 show_usage
		return 1
	fi
	shift

	local execution=bash
	# shellcheck disable=SC2209
	[[ -n "$is_dry_run" ]] && execution=cat

	enumerate_files "$@" | prepare_commands "$(compile_pattern "${pattern}")" | $execution
}


function run_self_tests() {
	_test_date_for_file
	_test_compile_pattern
	_test_prepare_commands
}


function show_usage() {
	local prog="${0##*/}"
	cat <<-HELPMESSAGE
		Usage: ${prog} [OPTIONS] PATTERN [FILE...]  # organize files in the current directory

		Options:
		  -n, --dry-run        only show what would be done, but don't actually do it
		  -t, --test           run self-tests instead of organizing files
		  -v, --verbose
	HELPMESSAGE
	if (( verbosity > 0 )); then
		cat <<-VERBOSEHELP

		This utility organizes files into a folder hierarchy according to a pattern. Interpreted sequences are:

		  %y    year
		  %m    month (e.g. 07)
		  %b    locale's abbreviated month name
		  %B    locale's full month name (e.g. January)
		  %d    day (e.g. 08)
		  %q    quarter number (e.g. 20180325 is in Q1)
		  %h    half number (e.g. 20180101 is in H1, as is 20180630)
		  %G    year of ISO week number
		  %V    ISO week number
		VERBOSEHELP
	fi
}


function main() {
	local -a args=()
	declare -i verbosity=0
	# shellcheck disable=SC2016
	local subcommand='organize "${args[@]}"'
	while (( $# > 0 )); do
		case "$1" in
			-n|--dry-run)
				is_dry_run=true
				;;
			-v|--verbose)
				verbosity+=1
				;;
			-t|--test)
				subcommand="run_self_tests"
				;;
			-\?|-h|--help|help)
				subcommand=">&2 show_usage"
				;;
			--)
				shift
				break
				;;
			*)
				args+=("$1")
				;;
		esac
		shift
	done
	while (( $# > 0 )); do
		args+=("$1")
		shift
	done

	# shellcheck disable=SC2086
	eval $subcommand
}

main "$@"
