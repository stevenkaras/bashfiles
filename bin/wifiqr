#!/usr/bin/env bash

# default to printing the current wireless network

function _qr_code_contents() {
	echo "WIFI:T:WPA;S:$1;P:$2;;"
}

function _find_current_network() {
	# Ubuntu typically uses iwgetid
	if type -t iwgetid >/dev/null; then
		iwgetid -r
		return 0
	fi

	# Fall back on nm-tool
	if type -t nm-tool >/dev/null; then
		nm-tool | awk 'f&&/\*/{ssid = substr($1, 2, length($1) - 2); print ssid};/Wireless Access Points \(\* = current AP\)/{f=1}'
		return 0
	fi

	# Mac uses airport
	if [[ -x /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport ]]; then
		/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}'
		return 0
	fi

	echo 'Unable to discover current wireless network' 1>&2
	return 1
}

function _find_network_pass() {
	if [[ -f "/etc/NetworkManager/system-connections/$1" ]]; then
		sudo cat "/etc/NetworkManager/system-connections/$1" | grep psk= | cut -d= -f 2
		return 0
	fi

	if type -t security >/dev/null; then
		security find-generic-password -wa "$1"
		# TODO: check success
		return 0
	fi

	echo 'Unable to discover current wireless network password' 1>&2
	return 1
}

function show_usage() {
	local prog="$(basename "$0")"
	cat <<-HELPMESSAGE
		  $prog SSID PASSWORD  # generate a QR code for quickly setting up the network
		  $prog SSID           # Looks up the password as saved
	HELPMESSAGE
}

function main() {
	local network="$1"
	case "$network" in
		-?|-h|--help|help)
			show_usage
			exit
			;;
		"")
			network="$(_find_current_network)"
			if [[ $? != 0 ]]; then
				exit 1
			fi
			if [[ -z "$network" ]]; then
				echo 'No current network found. Are you connected?'
				exit 1
			fi
			;;
	esac

	local password
	if [[ $# -lt 2 ]]; then
		password="$(_find_network_pass "$network")"
		if [[ $? != 0 ]]; then
			exit 1
		fi
	else
		password="$2"
	fi

	_qr_code_contents "$network" "$password" | qrencode -t UTF8
}

main "$@"
